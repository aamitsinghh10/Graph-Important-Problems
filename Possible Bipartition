class Solution {
public:
    bool Bipartite(vector<vector<int>> &adj,vector<int> &color,int src)
    {
        queue<int> q;
        q.push(src);
        color[src]=1;
        
        while(!q.empty())
        {
        int node=q.front();
        q.pop();
        
        for(auto it:adj[node])
        {
           if(color[it]==-1)
           {
               color[it]=1-color[node];
               q.push(it);
           }
           else if(color[it]==color[node])
           {
               return false;
           }
        }
   }
 return true;
}
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) 
    {
        vector<vector<int>> adj(n+1);
        for(int i=0;i<dislikes.size();i++)
        {
            adj[dislikes[i][0]].push_back(dislikes[i][1]);
            adj[dislikes[i][1]].push_back(dislikes[i][0]);
        }
        vector<int> color(n+1,-1);
    
        for(int i=0;i<n;i++)
        {
            if(color[i]==-1)
            {
                if(Bipartite(adj,color,i)==false)
                    return false;
            }
        }
        return true;
      }
};
