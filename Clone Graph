class Solution {
public:
    Node* cloneGraph(Node* node)
    {
        if(!node)
            return NULL;
        
        unordered_map<Node*,Node*> visited;
        
        queue<Node *> q;
        q.push(node);
        visited[node]=new Node(node->val,{});
        
        while(!q.empty())
        {
            Node *curr=q.front();
            q.pop();
            
            for(auto it:curr->neighbors)
            {
                if(visited.find(it)==visited.end())
                {
                    q.push(it);
                    visited[it]=new Node(it->val,{});
                }
                visited[curr]->neighbors.push_back(visited[it]);
            }
        }
        return visited[node];
    }
};
