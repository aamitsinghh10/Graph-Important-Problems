class Solution {
public:
    unordered_map<int,vector<int>> adj;
   
    void dfs(int u,vector<int> &disc,vector<int> &low,vector<int> &parent,vector<vector<int>> &bridges)
    {
        static int time=0;
        disc[u]=low[u]=time;
        time+=1;
        
        for(int v:adj[u])
        {
            if(disc[v]==-1)
            {
            parent[v]=u;
            dfs(v,disc,low,parent,bridges);
            low[u]=min(low[u],low[v]);//Normal case
            
            if(low[v]>disc[u])
                bridges.push_back(vector<int>({u,v}));
            }
            else if(v!=parent[u])//ignore child to parent edge(back edge)
                low[u]=min(low[u],disc[v]);
        }
        
    }
    void findBridges_Tarjans(int n,vector<vector<int>>& bridges)
    {
        vector<int> disc(n,-1),low(n,-1),parent(n,-1);
        
        for(int i=0;i<n;i++)
        {
            if(disc[i]==-1)
                dfs(i,disc,low,parent,bridges);
        }
    }
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) 
    {
        vector<vector<int>> bridges;
        
        for(int i=0;i<connections.size();i++)
        {
            adj[connections[i][0]].push_back(connections[i][1]);
            adj[connections[i][1]].push_back(connections[i][0]);
        }
        findBridges_Tarjans(n,bridges);
        
        return bridges;
    }
};
