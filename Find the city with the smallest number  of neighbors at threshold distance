class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold)
    {
     vector<vector<int>> distance(n,vector<int>(n,1e5));
     
        for(int i=0;i<edges.size();i++)    
     {
       distance[edges[i][0]][edges[i][1]] = edges[i][2];
       distance[edges[i][1]][edges[i][0]] = edges[i][2];
     }
    
     for(int k=0;k<n;k++)//floyd warshall algorithm 
     { 
         for(int i=0;i<n;i++) 
         {
             for(int j=0;j<n;j++) 
             {
                 if(distance[i][k]==INT_MAX || distance[k][j]==INT_MAX)
                     continue;
                 
                 else if(distance[i][k]+distance[k][j]<distance[i][j])  
                        distance[i][j] = distance[i][k]+distance[k][j];
             }
         }
     }
     int no_of_edges=INT_MAX;
     int ans = -1;
     for(int i=0;i<n;i++)  {
         int count=0;
         for(int j=0;j<n;j++) 
         {
             if(i!=j && distance[i][j]<=distanceThreshold)
                 count++;
         }
         if(no_of_edges>=count)  //smallest number of cities which are reachable
         {
             ans = i; //stores greater city value
             no_of_edges = count;
         }
     }
        
    return ans;
    }
};
