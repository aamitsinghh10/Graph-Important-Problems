class Solution {
public:
    int dfs(vector<vector<int>> &grid,vector<vector<bool>>& visited,int i,int j)
    {
        int rows=grid.size();
        int cols=grid[0].size();
        int res=0;
        
        if(i<0 or j<0 or i>=rows or j>=cols or visited[i][j]==true)
            return 0;
        
        if(grid[i][j]==0)
            return 0;
        
        if(visited[i][j]==false)
        {
            visited[i][j]=true;
            int left=dfs(grid,visited,i-1,j);
            int right=dfs(grid,visited,i+1,j);
            int up=dfs(grid,visited,i,j-1);
            int down=dfs(grid,visited,i,j+1);
            
            res=max(left,max(right,max(up,down)));//finding maximum path where we found gold
            visited[i][j]=false;//backtrack
        }
        return res+grid[i][j];
        
    }
    int getMaximumGold(vector<vector<int>>& grid)
    {
        int rows=grid.size();
        int cols=grid[0].size();
        
        int maxgold=0;
        
        vector<vector<bool>> visited(rows,vector<bool> (cols,false));
        
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {
                if(!visited[i][j])
                {
                    int gold=dfs(grid,visited,i,j);
                    maxgold=max(maxgold,gold);
                }
            }
        }
        return maxgold;
    }
};
