class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) 
    {
        vector<vector<pair<int,double>>> adj(n);
         
        for(int i=0;i<edges.size();i++)
        {
            adj[edges[i][0]].push_back({edges[i][1],succProb[i]});
            adj[edges[i][1]].push_back({edges[i][0],succProb[i]});
        }
        priority_queue<pair<double,int>> pq;
        
        vector<int> visited(n,0);
        vector<double> mx(n,0.0);
        
        mx[start]=1.0;
        pq.push({1.0,start});
        
        while(!pq.empty())
        {
            double prob=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            
            if(visited[node]==0)
            {
                visited[node]=1;
                
                for(auto it:adj[node])
                {
                    double nextprob=it.second;
                    int next=it.first;
                    
                    if(mx[next]<nextprob*prob)
                    {
                        mx[next]=nextprob*prob;
                        pq.push({mx[next],next});
                    }
                }
                
            }
        }
        return mx[end];
    }
};
