class Solution {
public:
    bool topological(vector<vector<int>> &adj,int n,vector<int> indegree)
    {
        queue<int> q;
        for(int i=0;i<n;i++)
        {
            if(indegree[i]==0)
                q.push(i);
        }
        int count=0;
        while(!q.empty())
        {
            int curr=q.front();
            q.pop();
            
            for(auto it:adj[curr])
            {
                indegree[it]--;
                if(indegree[it]==0)
                    q.push(it);
            }
            count++;
        }
        if(count!=n)
            return false;
        else 
            return true;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) 
    {
        int n=prerequisites.size();
        vector<vector<int>> adj(numCourses);
        
        vector<int> indegree(numCourses,0);
        
        for(int i=0;i<n;i++)
        {
            adj[prerequisites[i][1]].push_back(prerequisites[i][0]);
            
            indegree[prerequisites[i][0]]++;
        }
       
        return topological(adj,numCourses,indegree);
        
    }
};
